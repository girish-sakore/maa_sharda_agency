# frozen_string_literal: true

require 'simplecov'

SimpleCov.start do
  # Set the minimum coverage percentage
  minimum_coverage 90  # Requires at least 90% coverage for the suite to pass

  # Set the minimum coverage percentage by file
  minimum_coverage_by_file 95  # Requires at least 80% coverage per file

  # Configure the coverage directory
  # coverage_dir 'custom_coverage'  # Outputs the coverage report to 'custom_coverage/' directory

  # Add filters to exclude specific files or directories
  add_filter '/bin/'       # Exclude the 'bin' directory
  add_filter '/db/'        # Exclude the 'db' directory
  add_filter '/spec/'      # Exclude the 'spec' directory
  add_filter '/config/'    # Exclude the 'config' directory
  add_filter 'app/channels'   # Exclude files in 'app/admin'

  # Add a filter to exclude files by their filename pattern
  # add_filter do |source_file|
  #   source_file.filename.include?('deprecated')  # Exclude files with 'deprecated' in the filename
  # end

  # Group files in the report for easier navigation
  add_group 'Models', 'app/models'
  add_group 'Controllers', 'app/controllers'
  add_group 'Helpers', 'app/helpers'
  add_group 'Services', 'app/services'
  add_group 'Long Files' do |source_file|
    source_file.lines.count > 300  # Custom group for files with more than 100 lines
  end

  # Track coverage by branches
  track_files '{app,lib}/**/*.rb'  # Track all Ruby files in 'app' and 'lib' directories

  # Use custom profiles (optional)
  SimpleCov.start 'rails'  # Use the built-in 'rails' profile for typical Rails projects

  # Add custom command name (optional)
  # command_name 'RSpec Tests'  # Use a custom command name to distinguish this run in merged results

  # Merge coverage results from different test suites (optional)
  # merge_timeout 3600  # Set the timeout for merging results to 1 hour

  # Customize formatter (optional)
  SimpleCov.formatter = SimpleCov::Formatter::HTMLFormatter  # Default HTML formatter
  # SimpleCov.formatter = SimpleCov::Formatter::SimpleFormatter  # Simpler formatter option
end

# Optional: Require SimpleCov for other test environments
if ENV['COVERAGE'] == 'true'
  require 'simplecov'
  SimpleCov.start
end

# This file was generated by the `rails generate rspec:install` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause
# this file to always be loaded, without a need to explicitly require it in any
# files.
#
# Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, consider making
# a separate helper file that requires the additional dependencies and performs
# the additional setup, and require it from the spec files that actually need
# it.
#
# See https://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|
  # rspec-expectations config goes here. You can use an alternate
  # assertion/expectation library such as wrong or the stdlib/minitest
  # assertions if you prefer.
  config.expect_with :rspec do |expectations|
    # This option will default to `true` in RSpec 4. It makes the `description`
    # and `failure_message` of custom matchers include text for helper methods
    # defined using `chain`, e.g.:
    #     be_bigger_than(2).and_smaller_than(4).description
    #     # => "be bigger than 2 and smaller than 4"
    # ...rather than:
    #     # => "be bigger than 2"
    expectations.include_chain_clauses_in_custom_matcher_descriptions = true
  end

  # rspec-mocks config goes here. You can use an alternate test double
  # library (such as bogus or mocha) by changing the `mock_with` option here.
  config.mock_with :rspec do |mocks|
    # Prevents you from mocking or stubbing a method that does not exist on
    # a real object. This is generally recommended, and will default to
    # `true` in RSpec 4.
    mocks.verify_partial_doubles = true
  end

  # This option will default to `:apply_to_host_groups` in RSpec 4 (and will
  # have no way to turn it off -- the option exists only for backwards
  # compatibility in RSpec 3). It causes shared context metadata to be
  # inherited by the metadata hash of host groups and examples, rather than
  # triggering implicit auto-inclusion in groups with matching metadata.
  config.shared_context_metadata_behavior = :apply_to_host_groups

  # The settings below are suggested to provide a good initial experience
  # with RSpec, but feel free to customize to your heart's content.
  #   # This allows you to limit a spec run to individual examples or groups
  #   # you care about by tagging them with `:focus` metadata. When nothing
  #   # is tagged with `:focus`, all examples get run. RSpec also provides
  #   # aliases for `it`, `describe`, and `context` that include `:focus`
  #   # metadata: `fit`, `fdescribe` and `fcontext`, respectively.
  #   config.filter_run_when_matching :focus
  #
  #   # Allows RSpec to persist some state between runs in order to support
  #   # the `--only-failures` and `--next-failure` CLI options. We recommend
  #   # you configure your source control system to ignore this file.
  #   config.example_status_persistence_file_path = "spec/examples.txt"
  #
  #   # Limits the available syntax to the non-monkey patched syntax that is
  #   # recommended. For more details, see:
  #   # https://rspec.info/features/3-12/rspec-core/configuration/zero-monkey-patching-mode/
  #   config.disable_monkey_patching!
  #
  #   # Many RSpec users commonly either run the entire suite or an individual
  #   # file, and it's useful to allow more verbose output when running an
  #   # individual spec file.
  #   if config.files_to_run.one?
  #     # Use the documentation formatter for detailed output,
  #     # unless a formatter has already been configured
  #     # (e.g. via a command-line flag).
  #     config.default_formatter = "doc"
  #   end
  #
  #   # Print the 10 slowest examples and example groups at the
  #   # end of the spec run, to help surface which specs are running
  #   # particularly slow.
  #   config.profile_examples = 10
  #
  #   # Run specs in random order to surface order dependencies. If you find an
  #   # order dependency and want to debug it, you can fix the order by providing
  #   # the seed, which is printed after each run.
  #   #     --seed 1234
  #   config.order = :random
  #
  #   # Seed global randomization in this process using the `--seed` CLI option.
  #   # Setting this allows you to use `--seed` to deterministically reproduce
  #   # test failures related to randomization by passing the same `--seed` value
  #   # as the one that triggered the failure.
  #   Kernel.srand config.seed
end
